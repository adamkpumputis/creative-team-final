#max.puppies <-
my.name
# Create a boolean variable `too.expensive`, set to true if the cost is greater than $1,000
# Exercise-1: practice with basic syntax
# Create a variable `hometown` that stores the city in which you were born
hometown
my.name
hometown
my.name
my.name <- "Alex"
my.age <- "20"
my.name
my.age
install.packages("stringr")
load("stringr")
my.name <- "Alex"
my.age <- "20"
install.packages("stringr")
library(stringr)
my.name <- "Alex"
my.age <- "20"
#Loaded stringr package
install.packages("stringr")
library(stringr)
#created variable my.name
my.name <- "Alex"
#created variable my.age
my.age <- "20"
install.packages("stringr")
my.name
my.age
#Loaded stringr package
install.packages("stringr")
library(stringr)
#created variable my.name
my.name <- "Alex"
#created variable my.age
my.age <- "20"
Introduction <- function(name, age) {
return("Hello, my name is")
}
#Loaded stringr package
install.packages("stringr")
library(stringr)
#created variable my.name
my.name <- "Alex"
#created variable my.age
my.age <- "20"
Introduction <- function(name, age) {
return("Hello, my name is " + name +" and I'm " + age + " years old")
}
install.packages("stringr")
#Loaded stringr package
install.packages("stringr")
library(stringr)
#created variable my.name
my.name <- "Alex"
#created variable my.age
my.age <- "20"
Introduction <- function(name, age) {
return("Hello, my name is " + name +" and I'm " + age + " years old")
}
Introduction()
Introduction(name, age)
Introduction(Alex, 20)
install.packages("nycflights13")
install.packages("dplyr")
library(nycflights13)
library(dplyr)
flights <- mutate(flights, gained = arr_delay - dep_delay)
# Sort your data.frame desceding by the column you just created
flights <- arrange(flights, -gained)
# Try doing the last 2 steps in a single operation using the pipe operator
flights <- mutate(flights, gained = arr_delay - dep_delay) %>%
arrange(flights, -gained)
hist(flights$gained)
summarize(flights, avg = mean(gained))
View(flights)
flights.sea <- filter(flights, dep %in% c('SEA'))
flights.sea <- filter(flights, dest %in% c('SEA'))
flights.sea
mean(flights$gained, na.rm = TRUE)
flights.sea <- flights %>% select(gained, dest) %>%
filter(dest == 'SEA')
library(nycflights13)
library(dplyr)
View(flights)
avg.delay <- group_by(flights, month) %>%
summarise(mean = mean(dep_delay))
avg.delay
avg.delay <- group_by(flights, month) %>%
summarise(mean = mean(dep_delay)) %>%
summarise(max(mean))
avg.delay
avg.delay <- group_by(flights, month) %>%
summarise(mean = mean(dep_delay)) %>%
filter(max(mean))
avg.delay <- group_by(flights, month) %>%
summarise(mean = mean(dep_delay)) %>%
summarise(delay = mean(dep_delay, na.rm=TRUE))
# If you create a data.frame with the columns "month", and "delay" above, you should be able to create
# a scatterplot by passing it to the 'plot' function
plot(avg.delay)
avg.delay <- group_by(flights, month) %>%
summarise(mean = mean(dep_delay)) %>%
summarise(delay = mean(dep_delay, na.rm=TRUE))
# If you create a data.frame with the columns "month", and "delay" above, you should be able to create
# a scatterplot by passing it to the 'plot' function
plot(avg.delay)
# In which airport were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation before summarizing your data
airport.delay <- flights %>%
group_by(dest) %>%
summarise(delay = mean(arr_delay, na.rm=TRUE)) %>%
arrange(-avg.delay)
View(flights)
View(flights.sea)
View(flights)
airport.delay <- flights %>%
group_by(dest) %>%
summarise(delay = mean(arr_delay, na.rm=TRUE)) %>%
arrange(-delay)
airport.delay
library(nycflights13)
library(dplyr)
View(flights)
avg.arriv.delay <- flights %>% group_by(dest) %>%
summarize(avg = mean(arr_delay))
View avg.arriv.delay
View(avg.arriv.delay)
avg.arriv.delay <- flights %>% group_by(dest) %>%
summarize(avg = mean(arr_delay)) %>%
left_join("airports")
View(airports)
avg.arriv.delay <- flights %>% group_by(dest) %>%
summarize(avg = mean(arr_delay)) %>%
left_join(avg.arriv.delay, airports, by = "ffa")
avg.arriv.delay <- flights %>% group_by(dest) %>%
summarize(avg = mean(arr_delay)) %>%
left_join(avg.arriv.delay, airports, by = "dest")
View(avg.arriv.delay)
View(airlines)
avg.arriv.delay.airline <- flights %>% group_by(carrier) %>%
summarize(avg = mean(arr_delay)) %>%
left_join(avg.arriv.delay.airline, airlines, by = "carrier")
avg.arriv.delay.airline <- flights %>% group_by(carrier) %>%
summarize(avg = mean(arr_delay))
avg.arriv.delay.airline <- flights %>% group_by(carrier) %>%
summarize(avg = mean(arr_delay)) %>%
left_join(avg.arriv.delay.airline, airlines, by = "carrier")
View(avg.arriv.delay.airline)
avg.arriv.delay <- flights %>% group_by(dest) %>%
summarize(avg.arriv.delay = mean(arr_delay, na.rm = TRUE)) %>%
mutate(faa = dest) %>%
avg.arriv.delay <- flights %>% group_by(dest) %>%
summarize(avg.arriv.delay = mean(arr_delay, na.rm = TRUE)) %>%
mutate(faa = dest) %>%
left_join(airports, by = "faa")
avg.arriv.delay <- flights %>% group_by(dest) %>%
summarize(avg.arriv.delay = mean(arr_delay, na.rm = TRUE)) %>%
mutate(faa = dest) %>%
left_join(airports, by = "faa")
avg.arriv.delay.airline <- flights %>% group_by(carrier) %>%
summarize(avg.delay = mean(arr_delay, na.rm =TRUE)) %>%
avg.arriv.delay.airline <- flights %>% group_by(carrier) %>%
summarize(avg.delay = mean(arr_delay, na.rm =TRUE)) %>%
left_join(airlines, by = "carrier")
avg.arriv.delay.airline <- flights %>% group_by(carrier) %>%
summarize(avg.delay = mean(arr_delay, na.rm =TRUE)) %>%
left_join(airlines, by = "carrier")
library(plotly)
install.packages(plotly)
library(plotly)
install.packages("plotly")
library(plotly)
data <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv")
View(data)
data <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv")
View(data)
df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_world_gdp_with_codes.csv')
# light grey boundaries
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
plot_geo(df) %>%
add_trace(
z = ~GDP..BILLIONS., color = ~GDP..BILLIONS., colors = 'Blues',
text = ~COUNTRY, locations = ~CODE, marker = list(line = l)
) %>%
colorbar(title = 'GDP Billions US$', tickprefix = '$') %>%
layout(
title = '2014 Global GDP<br>Source:<a href="https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html">CIA World Factbook</a>',
geo = g
)
```
plot_geo(df) %>%
add_trace(
z = ~GDP..BILLIONS., color = ~GDP..BILLIONS., colors = 'Blues',
text = ~COUNTRY, locations = ~CODE, marker = list(line = l)
) %>%
colorbar(title = 'GDP Billions US$', tickprefix = '$') %>%
layout(
title = '2014 Global GDP<br>Source:<a href="https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html">CIA World Factbook</a>',
geo = g
)
map <- plot_geo(df) %>%
add_trace(
z = ~GDP..BILLIONS., color = ~GDP..BILLIONS., colors = 'Blues',
text = ~COUNTRY, locations = ~CODE, marker = list(line = l)
) %>%
colorbar(title = 'GDP Billions US$', tickprefix = '$') %>%
layout(
title = '2014 Global GDP<br>Source:<a href="https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html">CIA World Factbook</a>',
geo = g
)
library(plotly)
packageVersion('plotly')
```
m <- mtcars[which.max(mtcars$mpg), ]
a <- list(
x = m$wt,
y = m$mpg,
text = rownames(m),
xref = "x",
yref = "y",
showarrow = TRUE,
arrowhead = 7,
ax = 20,
ay = -40
)
plot_ly(mtcars, x = ~wt, y = ~mpg) %>%
add_markers() %>%
layout(annotations = a)
chart_link = plotly_POST(p, filename="annotation/single")
p <- 'https://plot.ly/r/getting-started'
chart_link = plotly_POST(p, filename="annotation/single")
chart_link = plotly_POST(filename = p, "annotation/single")
p <- 'https://plot.ly/r/getting-started'
chart_link = plotly_POST(filename = p, "/annotation/single")
chart <- plot_ly(mtcars, x = ~wt, y = ~mpg) %>%
add_markers() %>%
layout(annotations = a)
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
library("plotly")
library(plotly)
View(Introduction)
library(dplyr)
library(shiny)
library(dplyr)
library(shiny)
data("iris")
data("iris")
is.data.frame(iris)
View(iris)
shinyUI(fluidPage(
# Radio buttons
radioButtons("color", label = "Color",
choices = list("Green" = 'green', "Blue" = 'blue'),
selected = 'green'),
plotOutput('histogram')
))
shinyServer(function(input, output) {
# Reder a histogram of a given color
output$histogram <- renderPlot({
x <- rnorm(1000)
return(hist(x, col = input$color))
})
})
runApp('Desktop/INFO-201/m14-shiny/demo-3')
runApp('Desktop/a8-building-apps-addeck')
runApp('Desktop/a8-building-apps-addeck')
nrow(iris$Species = "setosa")
runApp('Desktop/a8-building-apps-addeck')
runApp('Desktop/a8-building-apps-addeck')
runApp('Desktop/a8-building-apps-addeck')
runApp('Desktop/a8-building-apps-addeck')
runApp('Desktop/a8-building-apps-addeck')
runApp('Desktop/a8-building-apps-addeck')
runApp('Desktop/a8-building-apps-addeck')
runApp('Desktop/a8-building-apps-addeck')
runApp('Desktop/a8-building-apps-addeck')
runApp('Desktop/a8-building-apps-addeck')
runApp('Desktop/a8-building-apps-addeck')
runApp('Desktop/a8-building-apps-addeck')
runApp('Desktop/a8-building-apps-addeck')
runApp('Desktop/a8-building-apps-addeck')
x <- filter(iris, Species %in% c(input$radio)) %>%
select(Petal.Width)
y <- filter(iris, Species %in% c(input$radio)) %>%
select(Petal.Length)
shinyServer(function(input, output) {
output$histogram <- renderPlot({
x <- filter(iris, Species %in% c(input$radio)) %>%
select(Petal.Width)
y <- filter(iris, Species %in% c(input$radio)) %>%
select(Petal.Length)
return(plot(x, y, title = "Petal Length and Width",
xlab = "Petal Width",
ylab = "Petal Lenth"))
})
})
runApp('Desktop/a8-building-apps-addeck')
runApp('Desktop/a8-building-apps-addeck')
runApp('Desktop/a8-building-apps-addeck')
runApp('Desktop/INFO-201/m14-shiny/demo-3')
runApp('Desktop/a8-building-apps-addeck')
runApp('Desktop/a8-building-apps-addeck')
library(plotly)
runApp('Desktop/a8-building-apps-addeck')
runApp('Desktop/a8-building-apps-addeck')
runApp('Desktop/a8-building-apps-addeck')
runApp('Desktop/a8-building-apps-addeck')
runApp('Desktop/a8-building-apps-addeck')
runApp('Desktop/a8-building-apps-addeck')
runApp('Desktop/a8-building-apps-addeck')
runApp('Desktop/a8-building-apps-addeck')
runApp('Desktop/a8-building-apps-addeck')
runApp('Desktop/a8-building-apps-addeck')
runApp('Desktop/a8-building-apps-addeck')
runApp('Desktop/a8-building-apps-addeck')
runApp('Desktop/a8-building-apps-addeck')
runApp('Desktop/a8-building-apps-addeck')
runApp('Desktop/a8-building-apps-addeck')
runApp('Desktop/a8-building-apps-addeck')
runApp('Desktop/a8-building-apps-addeck')
shiny::runApp('Desktop/a8-building-apps-addeck')
runApp('Desktop/a8-building-apps-addeck')
library(gapminder)
my.model <- lm(lifeExp ~ year, data=gapminder)
library(gapminder)
my.model <- lm(lifeExp ~ year, data=gapminder)
install.packages("gapminder")
library(gapminder)
my.model <- lm(lifeExp ~ year, data=gapminder)
my.model
install.packages('wesanderson')
install.packages('purrr')
install.packages('listviewer')
library(wesanderson)
library(purrr)
library(listviewer)
# Investigate with the structure (str) command
str(wesanderson)
# View with the jsonedit function (listviewer package)
jsonedit(wesanderson)
# Store names as a dataframe
wes.df <- data.frame(title=names(wesanderson))
# Add colors to dataframe
wes.df <- wes.df %>%
mutate(colors = wesanderson,
num.colors = map(colors, length))
install.packages("purrr")
install.packages("purrr")
install.packages('listviewer')
install.packages('wesanderson')
library(wesanderson)
library(purrr)
library(listviewer)
str(wesanderson)
# View with the jsonedit function (listviewer package)
jsonedit(wesanderson)
# Store names as a dataframe
wes.df <- data.frame(title=names(wesanderson))
# Add colors to dataframe
wes.df <- wes.df %>%
mutate(colors = wesanderson,
num.colors = map(colors, length))
library(wesanderson)
str(wesanderson)
library(dplyr)
library(tidyr)
library(wesanderson)
library(purrr)
library(listviewer)
str(wesanderson)
jsonedit(wes_palettes)
wesanderson <- wes_palettes
# Investigate with the structure (str) command
str(wesanderson)
# View with the jsonedit function (listviewer package)
jsonedit(wesanderson)
# Store names as a dataframe
wes.df <- data.frame(title=names(wesanderson))
# Add colors to dataframe
wes.df <- wes.df %>%
mutate(colors = wesanderson,
num.colors = map(colors, length))
View(wes.df)
wes.df
View(wes.df)
library(gapminder)
library(modelr)
library(tidyverse)
install.packages('modelr')
install.packages('tidyverse')
install.packages('gapminder')
install.packages("gapminder")
library(gapminder)
library(modelr)
library(tidyverse)
library(gapminder)
View(gapminder)
ggplot(gapminder)
ggplot(gapminder)
# Initial view of the data with ggplot
ggplot(gapminder = NULL)
plot(gapminder)
ggplot(gapminder)
gapminder %>%
ggplot(aes(year, lifeExp, group = country)) +
geom_line(alpha = 1/3)
nz <- filter(gapminder, country == "New Zealand")
View(nz)
nz %>%
ggplot(aes(year, lifeExp)) +
geom_line() +
ggtitle("Full data = ")
View(df)
df <- read.csv("Seattle_Police_Department_911_Incident_Response_2012.csv")
setwd("~/Desktop/creative-team-final/project_data")
df <- read.csv("Seattle_Police_Department_911_Incident_Response_2012.csv")
View(df)
get_map(location = "Seattle", zoom = 13)
library(ggplot2)
library(ggmap)
library(ggmap)
citation('ggmap')
get_map(location = "Seattle", zoom = 13)
map <- get_map(location = "Seattle", maptype = "satellite", zoom = 13)
map
ggplot(map)
ggmap(map)
install.packages('ggmap')
ggmap(map)
library(ggmap)
install.packages('ggmap')
install.packages("ggmap")
map <- get_map(location = "Seattle", maptype = "satellite", zoom = 13)
ggmap(map)
map <- get_map(location = "Seattle", zoom = 13)
ggmap(map)
devtools::install_github("dkahle/ggmap")
devtools::install_github("hadley/ggplot2")
library(ggplot2)
library(ggmap)
map <- get_map(location = "Seattle", zoom = 13)
ggmap(map)
install.packages(ggmap)
install.packages(ggplot2)
install.packages("ggmap")
install.packages("ggplot2")
install.packages("ggmap")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
library(ggmap)
library(leaflet)
var map = L.map('map').setView([-37.87, 175.475], 12);
var.map = L.map('map').setView([-37.87, 175.475], 12)
var.map <- L.map('map').setView([-37.87, 175.475], 12)
library(rMaps)
L2 <- Leaflet$new()
L2$setView(c(29.7632836,  -95.3632715), 10)
L2$tileLayer(provider = "MapQuestOpen.OSM")
library(rMaps)
library(leaflet)
install.packages(rMap)
library(rMaps)
library(leaflet)
L2 <- Leaflet$new()
L2$setView(c(29.7632836,  -95.3632715), 10)
L2$tileLayer(provider = "MapQuestOpen.OSM")
install.packages("rMap")
library(leaflet)
map.seattle <- leaflet() %>%
setView(lng = -122.335167,
lat = 47.608013,
zoom = 11) %>%
addTiles()
map.seattle
shiny::runApp('~/Desktop/creative-team-final/creative.team.final')
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
shiny::runApp('~/Desktop/creative-team-final/creative.team.final')
runApp('~/Desktop/creative-team-final/creative.team.final')
runApp('~/Desktop/creative-team-final/creative.team.final')
runApp('~/Desktop/creative-team-final/creative.team.final')
setwd('~/Desktop/creative-team-final/project_data')
runApp('~/Desktop/creative-team-final/creative.team.final')
runApp('~/Desktop/creative-team-final/creative.team.final')
setwd('~/Desktop/creative-team-final/project_data')
wd
View(wd)
viewwd
getwd()
df <- read.csv('Seattle_Police_Department_911_Incident_Response_2012.csv')
runApp('~/Desktop/creative-team-final/creative.team.final')
getwd()
runApp('~/Desktop/creative-team-final/creative.team.final')
runApp('~/Desktop/creative-team-final/creative.team.final')
