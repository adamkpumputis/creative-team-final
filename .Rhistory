View(repo.data)
View(repo.data)
challenge_dataset <- select(repo.data, size, language)
View(challenge_dataset)
View(challenge_dataset)
ch
ch
challenge_dataset <- select(repo.data, size, language) %>%
group_by(language) %>%
arrange(size)
View(challenge_dataset)
View(challenge_dataset)
challenge_dataset <- select(repo.data, size, language) %>%
group_by(language)
View(challenge_dataset)
View(challenge_dataset)
challenge_dataset <- select(repo.data, size, language) %>%
order(language)
challenge_dataset <- select(repo.data, size, language) %>%
sort(language)
challenge_dataset <- select(repo.data, size, language) %>%
sort(repo.data$language)
challenge_dataset <- select(repo.data, size, language) %>%
sort("language")
challenge_dataset <- select(repo.data, size, language) %>%
arrange(language)
View(challenge_dataset)
View(challenge_dataset)
challenge_dataset <- select(repo.data, size, language) %>%
group_by(language) %>%
arrange(size)
View(challenge_dataset)
View(challenge_dataset)
challenge_dataset <- select(repo.data, size, language) %>%
arrange(language)
challenge_dataset <- select(repo.data, size, language) %>%
group_by(language) %>%
arrange(size)
View(challenge_dataset)
challenge_dataset <- select(repo.data, size, language) %>%
arrange(language,size)
View(challenge_dataset)
View(challenge_dataset)
View(challenge_dataset)
View(challenge_dataset)
boxplot.default(challenge_dataset$language ~ challenge_dataset$size)
boxplot.default(challenge_dataset$size ~ challenge_dataset$language)
boxplot(challenge_dataset)
View(dplyr_table)
View(dplyr_table)
View(challenge_dataset)
View(challenge_dataset)
challenge_dataset <- select(repo.data, size, language) %>%
arrange(language,size) %>%
spread(language, size)
challenge_dataset <- select(repo.data, size, language) %>%
arrange(language,size) %>%
tidyr::spread(language, size)
yes <- boxplot(language~size, data=challenge_dataset )
yes <- boxplot(size~language, data=challenge_dataset )
yes <- boxplot(size~language, data=challenge_dataset, main="Language to Size Relationship",
xlab="Programming Language", ylab="Size (in MB)"
)
challenge_dataset <- select(repo.data, size, language) %>%
arrange(language,size) %>%
filter(language == "Go")
yes <- boxplot(size~language, data=challenge_dataset, main="Language to Size Relationship",
xlab="Programming Language", ylab="Size (in MB)"
)
challenge <- data.frame(challenge_dataset$language, stringsAsFactors=FALSE)
View(challenge)
View(challenge)
dplyr_table <- group_by(repo.data, language) %>%
summarise(Count = n(), Average = mean(forks))
challenge <- data.frame()
yes <- boxplot(size~language, data=challenge_dataset, main="Language to Size Relationship",
xlab="Programming Language", ylab="Size (in MB)"
)
View(dplyr_table)
View(dplyr_table)
View(repo.data)
View(repo.data)
View(repo.data)
View(repo.data)
challenge_dataset <- group_by(repo.data, language) %>%
summarise(Average Size = mean(size))
challenge_dataset <- group_by(repo.data, language) %>%
summarise(Size = mean(size))
View(challenge_dataset)
View(challenge_dataset)
challenge_dataset <- group_by(repo.data, language) %>%
summarise(Size = mean(size))
library(dplyr)
library(jsonlite)
challenge_dataset <- group_by(repo.data, language) %>%
summarise(Size = mean(size))
View(challenge_dataset)
View(challenge_dataset)
hist(challenge_dataset)
counts <- table(challenge_dataset$Size)
table(challenge_dataset$Size)
barplot(counts)
barplot(challenge_dataset$Size)
barplot(challenge_dataset$Size, main = "Average Size"
)
barplot(challenge_dataset$Size, main = "Average Size"
, names.arg = challenge_dataset$language
)
barplot(challenge_dataset$Size, main = "Average Size"
,names.arg = challenge_dataset$language
,cex.names = 0.5
)
barplot(challenge_dataset$Size, main = "Average Size"
,names.arg = challenge_dataset$language
,cex.names = 0.5
col=c("darkblue","red", "green")
)
barplot(challenge_dataset$Size, main = "Average Size"
,names.arg = challenge_dataset$language
,cex.names = 0.5
,col=c("darkblue","red", "green")
)
barplot(challenge_dataset$Size, main = "Average Size"
,names.arg = challenge_dataset$language
,cex.names = 0.5
,col=c("darkblue","red", "green")
,xlab = "Programming Language"
,ylab = "Size (in MB)"
)
barplot(challenge_dataset$Size, main = "Average Size"
,names.arg = challenge_dataset$language
,cex.names = 0.5
,col=c("darkblue","red", "green")
,xlab = "Programming Language"
,ylab = "Size (in MB)"
,set.seed(2); x <- rlnorm(1000, log(130))
,hist(x, breaks=seq(0, 3000, by=200), xlim=c(0,2100), xaxt="n")
,axis(1, at=c(0,2100), labels=c("",""), lwd.ticks=0)
,axis(1, at=seq(0 , 2000, by=200), lwd=0, lwd.ticks=1)
)
barplot(challenge_dataset$Size, main = "Average Size"
,names.arg = challenge_dataset$language
,cex.names = 0.5
,col=c("lightblue")
,xlab = "Programming Language"
,ylab = "Size (in MB)"
)
barplot(challenge_dataset$Size, main = "Average Size"
,names.arg = challenge_dataset$language
,cex.names = 0.5
,col=c("lightblue")
,xlab = "Programming Language"
,ylab = "Size (in MB)"
)
View(challenge_dataset)
View(challenge_dataset)
shiny::runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
install.packages("ggplot2")
library
library
# Adding prerequisite libraries
library(shiny)
library(dplyr)
library(ggplot2)
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
getwd
getwd()
setwd("/info201/creative-team-final")
setwd(~/info201/creative-team-final)
setwd(~info201/creative-team-final)
setwd("~info201/creative-team-final")
setwd("info201/creative-team-final")
getwd()
getwd()
shiny::runApp('creative.team.final')
runApp('creative.team.final')
runApp('creative.team.final')
getwd()
runApp('creative.team.final')
install.packages("leaflet")
runApp('creative.team.final')
runApp('creative.team.final')
runApp('creative.team.final')
setwd('C:/Users/Justin/Documents/info201/creative-team-final/project_data')
df <- read.csv('Seattle_Police_Department_911_Incident_Response_2012.csv')
library(dplyr)
library(plotly)
runApp('~/info201/creative-team-final/creative.team.final')
df <- read.csv('Seattle_Police_Department_911_Incident_Response_2012.csv')
library(dplyr)
View(df)
View(df)
yearly_crime_df <- select(df, Event.Clearance.Subgroup)
yearly_crime_df <- select(df, "Event.Clearance.Subgroup")
yearly_crime_df <- select(df, Event.Clearance.Subgroup)
yearly_crime_df <- select(df, Event.Clearance.Group)
View(yearly_crime_df)
View(yearly_crime_df)
yearly_crime_df <- select(df, Event.Clearance.Group) %>%
count(Event.Clearance.Group)
View(yearly_crime_df)
View(yearly_crime_df)
yearly_crime_df <- select(df, Event.Clearance.Group) %>%
count(Event.Clearance.Group) %>%
order(-n)
yearly_crime_df <- yearly_crime_df[order(-n),]
View(yearly_crime_df)
View(yearly_crime_df)
yearly_crime_df <- yearly_crime_df[order(n),]
yearly_crime_df <- yearly_crime_df[order_("n"),]
yearly_crime_df <- yearly_crime_df[order(n),]
yearly_crime_df <- yearly_crime_df[order(n),]
yearly_crime_df <- yearly_crime_df[order(yearly_crime_df$n),]
View(yearly_crime_df)
View(yearly_crime_df)
yearly_crime_df <- select(df, Event.Clearance.Group) %>%
count(Event.Clearance.Group)
View(yearly_crime_df)
View(yearly_crime_df)
yearly_crime_df <- select(df, Event.Clearance.Group) %>%
count(Event.Clearance.Group) %>%
order(yearly_crime_df$n)
yearly_crime_df <- select(df, Event.Clearance.Group) %>%
count(Event.Clearance.Group) %>%
[order(yearly_crime_df$n),]
yearly_crime_df <- select(df, Event.Clearance.Group) %>%
count(Event.Clearance.Group)
yearly_crime_df <- yearly_crime_df[order(yearly_crime_df$n),]
write.csv(yearly_crime_df,"~/project_data")
write.csv(yearly_crime_df)
write.csv(yearly_crime_df, file = "yearly_crime_df.csv")
yearly_crime_df <- select(df, Event.Clearance.Group) %>%
count(Event.Clearance.Group)
yearly_crime_df <- yearly_crime_df[order(yearly_crime_df$n),]
write.csv(yearly_crime_df, file = "yearly_crime_df.csv")
library(plotly)
library(dplyr)
df <- read.csv('Seattle_Police_Department_911_Incident_Response_2012.csv')
yearly_crime_df <- select(df, Event.Clearance.Group) %>%
count(Event.Clearance.Group)
yearly_crime_df <- yearly_crime_df[order(yearly_crime_df$n),]
write.csv(yearly_crime_df, file = "yearly_crime_df.csv")
runApp('~/info201/creative-team-final/creative.team.final')
p <- plot_ly(yearly_crime_df, x = ~Event.Clearance.Group,
y = ~n,
type = 'bar')
p
View(df)
View(df)
View(yearly_crime_df)
View(yearly_crime_df)
runApp('~/info201/creative-team-final/creative.team.final')
p <- plot_ly(yearly_crime_df, x = ~Event.Clearance.Group,
y = ~n,
type = 'bar') %>%
layout(xaxis = ax)
p <- plot_ly(yearly_crime_df, x = ~Event.Clearance.Group,
y = n,
type = 'bar') %>%
layout(xaxis = ax)
p <- plot_ly(yearly_crime_df, x = ~Event.Clearance.Group,
y = ~n,
type = 'bar') %>%
p <- plot_ly(yearly_crime_df, x = ~Event.Clearance.Group,
y = ~n,
type = 'bar') %>%
layout(yaxis = "")
p <- plot_ly(yearly_crime_df, x = ~Event.Clearance.Group,
y = ~n,
type = 'bar') %>%
layout(yaxis = "")
p
p <- plot_ly(yearly_crime_df, x = ~Event.Clearance.Group,
y = ~n,
type = 'bar') %>%
layout(yaxis = [""])
p
p <- plot_ly(yearly_crime_df, x = ~Event.Clearance.Group,
y = ~n,
type = 'bar') %>%
layout(yaxis = "Absolutely")
p
p <- plot_ly(yearly_crime_df, x = ~Event.Clearance.Group,
y = ~n,
type = 'bar') %>%
layout(yaxis = c(showticklabels = FALSE)
p
p <- plot_ly(yearly_crime_df, x = ~Event.Clearance.Group,
y = ~n,
type = 'bar') %>%
layout(yaxis = showticklabels = FALSE)
p <- plot_ly(yearly_crime_df, x = ~Event.Clearance.Group,
y = ~n,
type = 'bar') %>%
layout(yaxis = list(showticklabels = FALSE))
p
p <- plot_ly(yearly_crime_df, x = ~Event.Clearance.Group,
y = ~n,
type = 'bar') %>%
layout(yaxis = list(showticklabels = FALSE,
showline= FALSE))
p
p <- plot_ly(yearly_crime_df, x = ~Event.Clearance.Group,
y = ~n,
type = 'bar') %>%
layout(yaxis = list(showticklabels = FALSE,))
p
y = ~n,
type = 'bar') %>%
layout(yaxis = list(showticklabels = FALSE))
p
p <- plot_ly(yearly_crime_df, x = ~Event.Clearance.Group,
y = ~n,
type = 'bar') %>%
layout(yaxis = list(showticklabels = FALSE))
p
p <- plot_ly(yearly_crime_df, x = ~Event.Clearance.Group,
y = ~n,
type = 'bar') %>%
layout(yaxis = list(title=""))
p
p <- plot_ly(yearly_crime_df, x = ~Event.Clearance.Group,
y = ~n,
type = 'bar') %>%
layout(yaxis = list(title="",
zeroline = FALSE,
showline = FALSE,
showticklabels = FALSE,
showgrid = FALSE
}
p <- plot_ly(yearly_crime_df, x = ~Event.Clearance.Group,
y = ~n,
type = 'bar') %>%
layout(yaxis = list(title="",
zeroline = FALSE,
showline = FALSE,
showticklabels = FALSE,
showgrid = FALSE
)
p <- plot_ly(yearly_crime_df, x = ~Event.Clearance.Group,
y = ~n,
type = 'bar') %>%
layout(xaxis = list(title="",
zeroline = FALSE,
showline = FALSE,
showticklabels = FALSE,
showgrid = FALSE
)
)
p
p <- plot_ly(yearly_crime_df, x = ~Event.Clearance.Group,
y = ~n,
type = 'bar') %>%
layout(xaxis = list(title="",
zeroline = FALSE,
showline = FALSE,
showticklabels = FALSE,
showgrid = FALSE
)
)
p
p <- plot_ly(yearly_crime_df, x = ~Event.Clearance.Group,
y = ~n,
type = 'bar') %>%
layout(xaxis = list(title="Types of Incidents during 911 calls",
zeroline = FALSE,
showline = FALSE,
showticklabels = TRUE,
showgrid = TRUE
)
)
p
p <- plot_ly(yearly_crime_df, x = ~Event.Clearance.Group,
y = ~n,
type = 'bar') %>%
layout(xaxis = list(title="Types of Incidents during 911 calls",
zeroline = FALSE,
showline = FALSE,
showticklabels = FALSE,
showgrid = TRUE
)
)
p
p <- plot_ly(yearly_crime_df, x = ~Event.Clearance.Group,
y = ~n,
type = 'bar') %>%
layout(xaxis = list(title="Types of Incidents during 911 calls",
zeroline = TRUE,
showline = TRUE,
showticklabels = FALSE,
showgrid = TRUE
)
)
p
View(df)
View(df)
makeYearGraph <- function() {
yearGraph <- plot_ly(yearly_crime_df, x = ~Event.Clearance.Group,
y = ~n,
type = 'bar') %>%
layout(xaxis = list(title="Types of Incidents during 911 calls",
showticklabels = FALSE,
),
yaxis = list(title="Number of 911 calls")
)
return(yearGraph)
}
p <- makeYearGraph()
makeYearGraph <- function() {
yearGraph <- plot_ly(yearly_crime_df, x = ~Event.Clearance.Group,
y = ~n,
type = 'bar') %>%
layout(xaxis = list(title="Types of Incidents during 911 calls",
showticklabels = FALSE
),
yaxis = list(title="Number of 911 calls")
)
return(yearGraph)
}
p <- makeYearGraph()
p
setwd('C:/Users/Justin/Documents/info201/creative-team-final')
df <- read.csv('project_data/Seattle_Police_Department_911_Incident_Response_2012.csv')
makeYearGraph <- function(df) {
yearly_crime_df <- select(df, Event.Clearance.Group) %>%
count(Event.Clearance.Group)
yearGraph <- plot_ly(yearly_crime_df, x = ~Event.Clearance.Group,
y = ~n,
type = 'bar') %>%
layout(xaxis = list(title="Types of Incidents during 911 calls",
showticklabels = FALSE
),
yaxis = list(title="Number of 911 calls")
)
return(yearGraph)
}
source('./scripts/createYearlyGraph.R')
runApp('creative.team.final')
runApp('creative.team.final')
library(dplyr)
read.csv("project_data/Seattle_Police_Department_911_Incident_Response_2012.csv")
df <- read.csv("project_data/Seattle_Police_Department_911_Incident_Response_2012.csv")
df$Event.Clearance.Date <- as.Date(df$Event.Clearance.Date , "%m/%d/%y")
View(df)
View(df)
df <- read.csv("project_data/Seattle_Police_Department_911_Incident_Response_2012.csv")
View(df)
View(df)
df$Event.Clearance.Date <- as.Date(df$Event.Clearance.Date , "%m/%d/%Y")
View(df)
View(df)
write.csv(df, file = "project_data/Seattle_Police_Department_911_Incident_Response_2012.csv")
write.csv(df, file = "Seattle_Police_Department_911_Incident_Response_2012.csv")
write.csv(df, file = "project_data/Seattle_Police_Department_911_Incident_Response_2012.csv")
write.csv(df, file = "project_data/Fascinating.csv")
write.csv(df, file = "project_data/Seattle_Police_Department_911_Incident_Response_2012.csv.csv")
df <- read.csv('project_data/Seattle_Police_Department_911_Incident_Response_2012.csv')
df$Event.Clearance.Date <- as.Date(df$Event.Clearance.Date, "%m/%d/%Y")
View(df)
View(df)
df <- read.csv('project_data/Seattle_Police_Department_911_Incident_Response_2012.csv')
View(df)
View(df)
runApp('creative.team.final')
runApp('creative.team.final')
runApp('creative.team.final')
runApp('creative.team.final')
runApp('creative.team.final')
runApp('creative.team.final')
runApp('creative.team.final')
runApp('creative.team.final')
runApp('creative.team.final')
runApp('creative.team.final')
runApp('creative.team.final')
runApp('creative.team.final')
runApp('creative.team.final')
View(df)
View(df)
runApp('creative.team.final')
runApp('creative.team.final')
runApp('creative.team.final')
runApp('creative.team.final')
runApp('creative.team.final')
runApp('creative.team.final')
