}
# using get.data funciton to return the data of the given user
user.data <- get.data(base, user, "")
# retreiving repo_url from data
repo_url <- user.data$repos_url
# taking in two parameters and auth token for API Call
repo_url_param <- paste0(repo_url,"?sort=created&per_page=100", "&", token)
most_forked <- filter(repo.data, repo.data$forks == max(repo.data$forks)) %>%
select(name) %>%
as.character(most_forked)
```
User: `r user`
# Repo that has the most forks converted into characters for use in Markdown
user_img <- user.data$avatar_url
library(jsonlite)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(jsonlite)
library(dplyr)
library(devtools)
# auth token for github. added the query header ahead of time for ease of user
token <-  "access_token=db5ea1a7c6a0f32a676d09ab7bc0e00f7bdf7991"
# base url to send API request to github
base <- "https://api.github.com/"
# The user we are searching for.
user <- "gernest"
# function to paste the call together. It will then send the call via JSONLite
# to get the data.
get.data <- function(base, user.input, parameters) {
call <- paste0(base, "users/", user.input, parameters , "?",token)
data <- fromJSON(call, flatten=TRUE)
return(data)
}
# using get.data funciton to return the data of the given user
user.data <- get.data(base, user, "")
# retreiving repo_url from data
repo_url <- user.data$repos_url
# taking in two parameters and auth token for API Call
repo_url_param <- paste0(repo_url,"?sort=created&per_page=100", "&", token)
# Retriving data from github and flattening it for use in data analysis
repo.data <- fromJSON(repo_url_param, flatten=TRUE)
# Number of repos that the user has. Used length function foranswer
num_repos <- length(repo.data$name)
# Answer: 100 repos
# Repo that has the most forks converted into characters for use in Markdown
most_forked <- filter(repo.data, repo.data$forks == max(repo.data$forks)) %>%
select(name)
most_forked <- as.character(most_forked)
user_img <- user.data$avatar_url
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(jsonlite)
library(dplyr)
library(devtools)
# auth token for github. added the query header ahead of time for ease of user
token <-  "access_token=db5ea1a7c6a0f32a676d09ab7bc0e00f7bdf7991"
# base url to send API request to github
base <- "https://api.github.com/"
# The user we are searching for.
user <- "gernest"
# function to paste the call together. It will then send the call via JSONLite
# to get the data.
get.data <- function(base, user.input, parameters) {
call <- paste0(base, "users/", user.input, parameters , "?",token)
data <- fromJSON(call, flatten=TRUE)
return(data)
}
# using get.data funciton to return the data of the given user
user.data <- get.data(base, user, "")
# retreiving repo_url from data
repo_url <- user.data$repos_url
# taking in two parameters and auth token for API Call
repo_url_param <- paste0(repo_url,"?sort=created&per_page=100", "&", token)
# Retriving data from github and flattening it for use in data analysis
repo.data <- fromJSON(repo_url_param, flatten=TRUE)
# Number of repos that the user has. Used length function foranswer
num_repos <- length(repo.data$name)
# Answer: 100 repos
# Repo that has the most forks converted into characters for use in Markdown
most_forked <- filter(repo.data, repo.data$forks == max(repo.data$forks)) %>%
select(name)
most_forked <- as.character(most_forked)
user_img <- user.data$avatar_url
View(repo.data)
View(repo.data)
View(repo.data)
View(repo.data)
dates <- repo.data$created_at
dates <- repo.data$created_at
dates <- format(dates, format="%B %d %Y")
dates <- repo.data$created_at
dates <- format(dates, format="%B %d %Y")
dates <- repo.data$created_at
dates <- format(dates, format="%B %d %Y")
dates
View(repo.data)
View(repo.data)
dates <- repo.data$created_at %>%
substr(0,9)
dates <- repo.data$created_at %>%
substr(0,10)
dates <- repo.data$created_at %>%
substr(0,10) %>%
as.Date(.) %>%
format(., format="%B %d %Y")
repo.data <- mutate(repo.data, DateCreated=dates)
View(repo.data)
View(repo.data)
table.data <- select(repo.data,name,description,DateCreated,language,watchers)
View(table.data)
View(table.data)
View(table.data)
View(table.data)
table.data <- select(repo.data,name,description,DateCreated,language,watchers) %>%
`colnames(.)<-`c("Name","Description","Date Created", "Language", "Watcher Count")
table.data <- select(repo.data,name,description,DateCreated,language,watchers) %>%
colnames(.)<-c("Name","Description","Date Created", "Language", "Watcher Count")
colnames(table.data)<-c("Name","Description","Date Created", "Language", "Watcher Count")
View(table.data)
View(table.data)
dates <- repo.data$created_at %>%
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(jsonlite)
library(dplyr)
library(devtools)
# auth token for github. added the query header ahead of time for ease of user
token <-  "access_token=db5ea1a7c6a0f32a676d09ab7bc0e00f7bdf7991"
# base url to send API request to github
base <- "https://api.github.com/"
# The user we are searching for.
user <- "gernest"
# function to paste the call together. It will then send the call via JSONLite
# to get the data.
get.data <- function(base, user.input, parameters) {
call <- paste0(base, "users/", user.input, parameters , "?",token)
data <- fromJSON(call, flatten=TRUE)
return(data)
}
# using get.data funciton to return the data of the given user
user.data <- get.data(base, user, "")
# retreiving repo_url from data
repo_url <- user.data$repos_url
# taking in two parameters and auth token for API Call
repo_url_param <- paste0(repo_url,"?sort=created&per_page=100", "&", token)
# Retriving data from github and flattening it for use in data analysis
repo.data <- fromJSON(repo_url_param, flatten=TRUE)
# Number of repos that the user has. Used length function foranswer
num_repos <- length(repo.data$name)
# Answer: 100 repos
# Repo that has the most forks converted into characters for use in Markdown
most_forked <- filter(repo.data, repo.data$forks == max(repo.data$forks)) %>%
select(name)
most_forked <- as.character(most_forked)
user_img <- user.data$avatar_url
# Chunk 3
dates <- repo.data$created_at %>%
substr(0,10) %>%
as.Date(.) %>%
format(., format="%B %d %Y")
repo.data <- mutate(repo.data, DateCreated=dates)
table.data <- select(repo.data,name,description,DateCreated,language,watchers)
colnames(table.data)<-c("Name","Description","Date Created", "Language", "Watcher Count")
?n()
View(repo.data)
View(repo.data)
dplyr_table <- group_by(repo.data, Language) %>%
summarise(Count = n(), Average = mean(forks))
View(repo.data)
View(repo.data)
dplyr_table <- group_by(repo.data, language) %>%
summarise(Count = n(), Average = mean(forks))
View(dplyr_table)
View(dplyr_table)
View(repo.data)
View(repo.data)
challenge_dataset <- select(repo.data, size, language)
View(challenge_dataset)
View(challenge_dataset)
ch
ch
challenge_dataset <- select(repo.data, size, language) %>%
group_by(language) %>%
arrange(size)
View(challenge_dataset)
View(challenge_dataset)
challenge_dataset <- select(repo.data, size, language) %>%
group_by(language)
View(challenge_dataset)
View(challenge_dataset)
challenge_dataset <- select(repo.data, size, language) %>%
order(language)
challenge_dataset <- select(repo.data, size, language) %>%
sort(language)
challenge_dataset <- select(repo.data, size, language) %>%
sort(repo.data$language)
challenge_dataset <- select(repo.data, size, language) %>%
sort("language")
challenge_dataset <- select(repo.data, size, language) %>%
arrange(language)
View(challenge_dataset)
View(challenge_dataset)
challenge_dataset <- select(repo.data, size, language) %>%
group_by(language) %>%
arrange(size)
View(challenge_dataset)
View(challenge_dataset)
challenge_dataset <- select(repo.data, size, language) %>%
arrange(language)
challenge_dataset <- select(repo.data, size, language) %>%
group_by(language) %>%
arrange(size)
View(challenge_dataset)
challenge_dataset <- select(repo.data, size, language) %>%
arrange(language,size)
View(challenge_dataset)
View(challenge_dataset)
View(challenge_dataset)
View(challenge_dataset)
boxplot.default(challenge_dataset$language ~ challenge_dataset$size)
boxplot.default(challenge_dataset$size ~ challenge_dataset$language)
boxplot(challenge_dataset)
View(dplyr_table)
View(dplyr_table)
View(challenge_dataset)
View(challenge_dataset)
challenge_dataset <- select(repo.data, size, language) %>%
arrange(language,size) %>%
spread(language, size)
challenge_dataset <- select(repo.data, size, language) %>%
arrange(language,size) %>%
tidyr::spread(language, size)
yes <- boxplot(language~size, data=challenge_dataset )
yes <- boxplot(size~language, data=challenge_dataset )
yes <- boxplot(size~language, data=challenge_dataset, main="Language to Size Relationship",
xlab="Programming Language", ylab="Size (in MB)"
)
challenge_dataset <- select(repo.data, size, language) %>%
arrange(language,size) %>%
filter(language == "Go")
yes <- boxplot(size~language, data=challenge_dataset, main="Language to Size Relationship",
xlab="Programming Language", ylab="Size (in MB)"
)
challenge <- data.frame(challenge_dataset$language, stringsAsFactors=FALSE)
View(challenge)
View(challenge)
dplyr_table <- group_by(repo.data, language) %>%
summarise(Count = n(), Average = mean(forks))
challenge <- data.frame()
yes <- boxplot(size~language, data=challenge_dataset, main="Language to Size Relationship",
xlab="Programming Language", ylab="Size (in MB)"
)
View(dplyr_table)
View(dplyr_table)
View(repo.data)
View(repo.data)
View(repo.data)
View(repo.data)
challenge_dataset <- group_by(repo.data, language) %>%
summarise(Average Size = mean(size))
challenge_dataset <- group_by(repo.data, language) %>%
summarise(Size = mean(size))
View(challenge_dataset)
View(challenge_dataset)
challenge_dataset <- group_by(repo.data, language) %>%
summarise(Size = mean(size))
library(dplyr)
library(jsonlite)
challenge_dataset <- group_by(repo.data, language) %>%
summarise(Size = mean(size))
View(challenge_dataset)
View(challenge_dataset)
hist(challenge_dataset)
counts <- table(challenge_dataset$Size)
table(challenge_dataset$Size)
barplot(counts)
barplot(challenge_dataset$Size)
barplot(challenge_dataset$Size, main = "Average Size"
)
barplot(challenge_dataset$Size, main = "Average Size"
, names.arg = challenge_dataset$language
)
barplot(challenge_dataset$Size, main = "Average Size"
,names.arg = challenge_dataset$language
,cex.names = 0.5
)
barplot(challenge_dataset$Size, main = "Average Size"
,names.arg = challenge_dataset$language
,cex.names = 0.5
col=c("darkblue","red", "green")
)
barplot(challenge_dataset$Size, main = "Average Size"
,names.arg = challenge_dataset$language
,cex.names = 0.5
,col=c("darkblue","red", "green")
)
barplot(challenge_dataset$Size, main = "Average Size"
,names.arg = challenge_dataset$language
,cex.names = 0.5
,col=c("darkblue","red", "green")
,xlab = "Programming Language"
,ylab = "Size (in MB)"
)
barplot(challenge_dataset$Size, main = "Average Size"
,names.arg = challenge_dataset$language
,cex.names = 0.5
,col=c("darkblue","red", "green")
,xlab = "Programming Language"
,ylab = "Size (in MB)"
,set.seed(2); x <- rlnorm(1000, log(130))
,hist(x, breaks=seq(0, 3000, by=200), xlim=c(0,2100), xaxt="n")
,axis(1, at=c(0,2100), labels=c("",""), lwd.ticks=0)
,axis(1, at=seq(0 , 2000, by=200), lwd=0, lwd.ticks=1)
)
barplot(challenge_dataset$Size, main = "Average Size"
,names.arg = challenge_dataset$language
,cex.names = 0.5
,col=c("lightblue")
,xlab = "Programming Language"
,ylab = "Size (in MB)"
)
barplot(challenge_dataset$Size, main = "Average Size"
,names.arg = challenge_dataset$language
,cex.names = 0.5
,col=c("lightblue")
,xlab = "Programming Language"
,ylab = "Size (in MB)"
)
View(challenge_dataset)
View(challenge_dataset)
shiny::runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
install.packages("ggplot2")
library
library
# Adding prerequisite libraries
library(shiny)
library(dplyr)
library(ggplot2)
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
runApp('info201/a8-building-apps-justin-ichiro-choi/assignment8')
shiny::runApp('info201/creative-team-final/creative.team.final')
setwd('C:/Users/Justin/Documents/info201/creative-team-final')
library(shiny)
library(leaflet)
library(dplyr)
library(plotly)
df <- read.csv('./project_data/filtered.csv')
library(shiny)
library(leaflet)
library(dplyr)
library(plotly)
library(lubridate)
setwd('C:/Users/Justin/Documents/info201/creative-team-final')
df <- read.csv('project_data/filtered.csv')
time_df <- mutate(df, crime.month = month(Event.Clearance.Date)) %>%
count(crime.month)
time_df$crime.month <- c('January', 'February', 'March', 'April',
'May', 'June', 'July', 'August', 'September',
'October', 'November', 'December') %>%
factor(time_df$crime.month, levels = time_df[["crime.month"]])
View(time_df)
View(time_df)
time_df$crime.month <- c('January', 'February', 'March', 'April',
'May', 'June', 'July', 'August', 'September',
'October', 'November', 'December')
View(time_df)
View(time_df)
time.graph <- plot_ly(time_df,
x = ~crime.month,
y = ~n,
type = 'bar',
color = I("grey"),
name = "Number of 911 Calls by Month"
) %>%
layout(title="Number of 911 Calls by Month",
xaxis=list(title=""),
yaxis=list(title="Number of 911 Calls")
)
time.graph
time_df <- mutate(df, crime.month = month(Event.Clearance.Date)) %>%
count(crime.month)
time_df$crime.month <- c('January', 'February', 'March', 'April',
'May', 'June', 'July', 'August', 'September',
'October', 'November', 'December')
time_df$crime.month <- factor(time_df$crime.month, levels = time_df[["crime.month"]])
View(time_df)
View(time_df)
time.graph <- plot_ly(time_df,
x = ~crime.month,
y = ~n,
type = 'bar',
color = I("grey"),
name = "Number of 911 Calls by Month"
) %>%
layout(title="Number of 911 Calls by Month",
xaxis=list(title=""),
yaxis=list(title="Number of 911 Calls")
)
time.graph
time.graph <- plot_ly(time_df,
x = ~crime.month,
y = ~n,
type = 'bar',
color = I("grey"),
name = "Number of 911 Calls by Month"
) %>%
layout(title="Number of 911 Calls by Month",
xaxis=list(title=""),
yaxis=list(title="Number of 911 Calls"),
margin = list(b = 100)
)
time.graph
time.graph <- plot_ly(time_df,
x = ~crime.month,
y = ~n,
type = 'bar',
color = I("grey"),
name = "Number of 911 Calls by Month"
) %>%
layout(title="Number of 911 Calls by Month",
xaxis=list(title=""),
yaxis=list(title="Number of 911 Calls"),
margin = list(b = 110)
)
time.graph
library(dplyr)
library(lubridate)
runApp('creative.team.final')
runApp('creative.team.final')
runApp('creative.team.final')
runApp('creative.team.final')
install.packages("lubridate")
install.packages("lubridate")
july_df <- mutate(df, crime.month = month(Event.Clearance.Date)) %>%
filter(crime.month == 7)
library(shiny)
library(leaflet)
library(dplyr)
library(plotly)
library(lubridate)
july_df <- mutate(df, crime.month = month(Event.Clearance.Date)) %>%
filter(crime.month == 7)
df <- read.csv('project_data/filtered.csv')
july_df <- mutate(df, crime.month = month(Event.Clearance.Date))
july_df <- mutate(df, crime.month = month(Event.Clearance.Date)) %>%
filter(crime.month == 7)
View(july_df)
View(july_df)
july_df <- mutate(df, crime.month = month(Event.Clearance.Date)) %>%
filter(crime.month == 7) %>%
count(Event.Clearance.Group)
View(july_df)
View(july_df)
july_pie_graph <- plot_ly(july_df,
labels = ~Event.Clearance.Group,
values = ~n,
type = 'pie'
)
july_pie_graph
july_pie_graph <- plot_ly(july_df,
labels = ~Event.Clearance.Group,
values = ~n,
type = 'pie'
) %>%
layout(title = "911 Calls Topics during July, 2012",
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE)
)
july_pie_graph
july_pie_graph <- plot_ly(july_df,
labels = ~Event.Clearance.Group,
values = ~n,
type = 'pie',
showlegend = FALSE
) %>%
layout(title = "911 Calls Topics during July, 2012",
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE)
)
july_pie_graph
runApp('creative.team.final')
runApp('creative.team.final')
